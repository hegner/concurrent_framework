/**
 * Observer.h
 *
 *  Created on: Apr 2, 2012
 *      Author: rbianchi@cern.ch  (Riccardo-Maria BIANCHI)
 */

#ifndef OBSERVER_H_
#define OBSERVER_H_

// include C++
#include <list>  // to store the list of subscribers

class Publisher; // forward declaration


class Subscriber {
public:
	virtual ~Subscriber();
	virtual void update(Publisher* who, void* what = 0) = 0;
};


class Publisher {
public:
	Publisher() { notifyEnabled = true; };
	virtual ~Publisher();
	void subscribe(Subscriber* s) { subscribers.push_back(s); }
	void unsubscribe(Subscriber* s) { subscribers.remove(s); }
	void notify(void* what = 0, Subscriber *s = 0);
	void setNotifyEnabled(bool flag) { notifyEnabled = flag; }
	bool getNotifyEnabled() const { return notifyEnabled; }
private:
	std::list<Subscriber*> subscribers;
	bool notifyEnabled;
};




#endif /* OBSERVER_H_ */
