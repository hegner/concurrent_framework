/**
 * ChainAlgosGraph.cpp
 *
 *  Created on: Mar 6, 2012
 *      Author: rbianchi@cern.ch  (Riccardo-Maria BIANCHI)
 */

#include "ChainAlgosGraph.h"
// include tbb
//#include "tbb/flow_graph.h"

using namespace tbb::flow;


void ChainAlgosGraph::test()
{
  TRandom *rnd = new TRandom(time(0));
  Double_t x = rnd->Rndm();
  std::cout << "x = " << x << std::endl;
}

struct ChainAlgosGraph::body {
    std::string my_name;
    body( const char *name ) : my_name(name) {}
    void operator()( continue_msg ) const {
        printf("%s\n", my_name.c_str());
        ChainAlgosGraph::test();
    }
};


void test2(const char* filename)
{
	TFile *file0 = TFile::Open(filename);
	file0->ls();
}

struct body2 {
    std::string my_name;
    std::string filename;
    body2( const char *name, const char *filename ) : my_name(name), filename(filename) {}
    void operator()( continue_msg ) const {
        printf("%s - opening: %s\n", my_name.c_str(), filename.c_str());
        test2(filename.c_str());
    }
};


ChainAlgosGraph::ChainAlgosGraph(std::string name, int n)
{
}

void ChainAlgosGraph::buildChain()
{
	// TODO Auto-generated constructor stub
	graph g;
	broadcast_node< continue_msg > start(g);
	//continue_node<continue_msg> a( g, body2("A", "DATA_Egamma_Run184022.root"));
	continue_node<continue_msg> a( g, body("A"));
	//continue_node<continue_msg> b( g, body( (name+"B").c_str() ));
	continue_node<continue_msg> b( g, body("B"));
	continue_node<continue_msg> c( g, body("C"));
	continue_node<continue_msg> d( g, body("D"));
	continue_node<continue_msg> e( g, body("E"));
	make_edge( start, a );
	make_edge( start, b );
	make_edge( a, c );
	make_edge( b, c );
	make_edge( c, d );
	make_edge( a, e );
}

void ChainAlgosGraph::startChain()
{
//	for (int i; i < n; ++i) {
//		start.try_put( continue_msg() );
//		g.wait_for_all();
//	}
}

ChainAlgosGraph::~ChainAlgosGraph() {
	// TODO Auto-generated destructor stub
}


